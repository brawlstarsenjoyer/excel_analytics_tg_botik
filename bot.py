import os
import tempfile
import logging
from pathlib import Path
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

AUTHORIZED_IDS_STR = os.environ.get("AUTHORIZED_IDS", "")
AUTHORIZED_USER_IDS = set(map(int, AUTHORIZED_IDS_STR.split(","))) if AUTHORIZED_IDS_STR else set()

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
PRIORITY_DRINKS = {
    "Espresso",
    "Double espresso decaffeinated",
    "Chocolate Truffle",
    "Sakura Latte",
    "Matcha Latte",
    "Berry RAF",
    "Kakao Banana",
    "Masala Tea Latte",
    "Cheese & Orange Latte",
    "Double cappuccino vegan",
    "Flat White",
    "Flat White decaffeinated",
    "Flat white vegan",
    "Latte",
    "Latte decaffeinated",
    "Latte vegan",
    "Ice latte",
    "Ice latte decaffeinated",
    "Espresso decaffeinated",
    "Ice latte vegan",
    "Espresso tonic",
    "Espresso tonic decaffeinated",
    "Bumblebee",
    "Doppio(double espresso)",
    "Americano",
    "Americano decaffeinated",
    "Cappuccino",
    "Cappuccino decaffeinated",
    "Cacao",
    "Hot chocolate",
    "Cappuccino vegan",
    "Double Americano",
    "Double cappuccino"
}
PRIORITY_DRINKS_LOWER = {name.lower().strip() for name in PRIORITY_DRINKS}


def is_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return not AUTHORIZED_USER_IDS or user_id in AUTHORIZED_USER_IDS


def analyze_excel(file_path: str) -> tuple[str, pd.DataFrame]:
    """–ê–Ω–∞–ª–∏–∑ Excel-—Ñ–∞–π–ª–∞ —Å –∫–∞—Å—Å–æ–≤—ã–º –æ—Ç—á—ë—Ç–æ–º"""
    df_raw = pd.read_excel(file_path, header=None)

    header_row = None
    for i in range(len(df_raw)):
        if "Denumire marfa" in df_raw.iloc[i].values:
            header_row = i
            break

    if header_row is None:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª ‚Äî –æ—Ç—á—ë—Ç –∫–∞—Å—Å—ã.")

    df = df_raw.iloc[header_row:].copy()
    df.columns = df.iloc[0]
    df = df[1:].reset_index(drop=True)

    report_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    if 'Data' in df.columns:
        non_empty = df['Data'].dropna()
        if not non_empty.empty:
            try:
                report_date = pd.to_datetime(non_empty.iloc[0], dayfirst=True).strftime('%d.%m.%Y')
            except Exception:
                report_date = str(non_empty.iloc[0]).strip()

    required = ["Denumire marfa", "Cantitate", "Suma cu TVA fƒÉrƒÉ reducere"]
    if not all(col in df.columns for col in required):
        raise ValueError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ù–∞–π–¥–µ–Ω—ã: {list(df.columns)}")

    df = df[required].copy()
    df = df.dropna(subset=["Denumire marfa"])
    df = df[~df["Denumire marfa"].str.contains("Punga", na=False, case=False)]

    df['is_priority'] = df['Denumire marfa'].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)

    result = df.groupby("Denumire marfa").agg(
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("Cantitate", "sum"),
        –°—É–º–º–∞=("Suma cu TVA fƒÉrƒÉ reducere", "sum"),
        is_priority=("is_priority", "any")
    ).round(2)

    result = result.sort_values(['is_priority', '–°—É–º–º–∞'], ascending=[False, False])
    result_for_save = result.drop(columns=['is_priority'])

    return report_date, result_for_save


def format_sales_report(report_date: str, df: pd.DataFrame) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω—É –∏–∑ report (17)_–¥–ª—è_telegram.txt"""
    df = df.copy()
    if df.index.name != "Denumire marfa":
        df.index.name = "Denumire marfa"
    items = df.reset_index()

    coffee_items = items[items["Denumire marfa"].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)]
    total_revenue = items["–°—É–º–º–∞"].sum()
    coffee_revenue = coffee_items["–°—É–º–º–∞"].sum() if not coffee_items.empty else 0
    coffee_count = coffee_items["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum() if not coffee_items.empty else 0

    name_map = {
        "Americano": "americano",
        "Cappuccino": "cappuccino",
        "Latte": "latte",
        "Berry RAF": "berry raf",
        "Double cappuccino": "double cappuccino",
        "Americano decaffeinated": "americano decaf",
        "Cheese & Orange Latte": "cheese & orange latte",
        "Sakura Latte": "sakura latte",
        "Latte decaffeinated": "latte decaf",
        "Cacao": "cacao",
        "Flat White": "flat white",
        "Flat White decaffeinated": "flat white decaf",
        "Espresso": "espresso",
        "Espresso decaffeinated": "espresso decaf",
        "Double Americano": "double americano",
        "Hot chocolate": "hot chocolate",
        "Chocolate Truffle": "chocolate truffle",
        "Doppio(double espresso)": "doppio(double espresso)",
        "Cappuccino vegan": "cappuccino vegan",
        "Double cappuccino vegan": "double cappuccino vegan",
        "Latte vegan": "latte vegan",
        "Ice latte": "ice latte",
        "Ice latte decaffeinated": "ice latte decaf",
        "Ice latte vegan": "ice latte vegan",
        "Espresso tonic": "espresso tonic",
        "Espresso tonic decaffeinated": "espresso tonic decaf",
        "Bumblebee": "bumblebee",
        "Masala Tea Latte": "masala tea latte",
        "Kakao Banana": "kakao banana",
        "Matcha Latte": "matcha latte",
    }

    composition_parts = []
    for _, row in coffee_items.iterrows():
        name = row["Denumire marfa"]
        clean = name_map.get(name, name.lower())
        qty = int(row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        composition_parts.append(f"{qty} {clean}")
    composition = " + ".join(composition_parts)

    lines = []
    lines.append(f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_date}")
    lines.append(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å: {total_revenue:,.2f} –ª–µ–π".replace(",", " "))
    lines.append(f"‚òï –í—ã—Ä—É—á–∫–∞ –æ—Ç –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤: {coffee_revenue:,.2f} –ª–µ–π".replace(",", " "))
    lines.append(f"üî¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤: {int(coffee_count)} —à—Ç.")
    if composition:
        lines.append(f"‚ÑπÔ∏è  –°–æ—Å—Ç–∞–≤: {composition}")
    lines.append(f"üç± –í—ã—Ä—É—á–∫–∞ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ: {(total_revenue - coffee_revenue):,.2f} –ª–µ–π".replace(",", " "))
    lines.append("")
    lines.append("üìä –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:")
    lines.append("Denumire marfa                             –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ      –°—É–º–º–∞")
    lines.append("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

    for _, row in items.iterrows():
        name = str(row["Denumire marfa"])
        qty = f"{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']:.2f}"
        amt = f"{row['–°—É–º–º–∞']:.2f}"
        line = f"{name[:40]:<40} {qty:>12} {amt:>10}"
        lines.append(line)

    return "\n".join(lines)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Å—Å–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ—Ç—á—ë—Ç–æ–º, –∏ —è:\n"
        "  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏\n"
        "  ‚Ä¢ –°–≥—Ä—É–ø–ø–∏—Ä—É—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n"
        "  ‚Ä¢ –ü–æ—Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É\n"
        "  ‚Ä¢ –û—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏\n"
        "  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—é –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt\n\n"
        "‚ú® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –±—É–¥—É—Ç –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞!"
    )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Excel-—Ñ–∞–π–ª–æ–≤"""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    document = update.message.document
    file_name = (document.file_name or "").strip().lower()
    mime_type = (document.mime_type or "").strip()

    if not (
        mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        or file_name.endswith(".xlsx")
    ):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    input_path = None
    output_path = None

    try:
        await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...")

        file = await context.bot.get_file(document.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            await file.download_to_drive(tmp.name)
            input_path = tmp.name

        await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        report_date, df_result = analyze_excel(input_path)

        txt_content = format_sales_report(report_date, df_result)

        output_filename = f"–û—Ç—á—ë—Ç_{report_date.replace('.', '_')}.txt"
        output_path = os.path.join(tempfile.gettempdir(), output_filename)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(txt_content)

        await update.message.reply_document(
            document=open(output_path, 'rb'),
            filename=output_filename,
            caption="‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!"
        )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞:")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞—Å—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç."
        )
    finally:
        for path in [input_path, output_path]:
            if path and Path(path).exists():
                try:
                    os.unlink(path)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {path}: {e}")


async def welcome_or_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É /start –ø—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = [["/start"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "üëã –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=reply_markup
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"Exception while handling an update: {context.error}")
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
    except Exception:
        pass


def main():
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(
        filters.Document.mime_type("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") |
        filters.Document.file_extension("xlsx"),
        handle_document
    ))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, welcome_or_start))
    app.add_error_handler(error_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

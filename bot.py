import os
import tempfile
import logging
from pathlib import Path
import pandas as pd
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

AUTHORIZED_IDS_STR = os.environ.get("AUTHORIZED_IDS", "")
AUTHORIZED_USER_IDS = set(map(int, AUTHORIZED_IDS_STR.split(","))) if AUTHORIZED_IDS_STR else set()

# –°–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
PRIORITY_DRINKS = {
    "Espresso",
    "Double espresso decaffeinated",
    "Chocolate Truffle",
    "Sakura Latte",
    "Matcha Latte",
    "Berry RAF",
    "Kakao Banana",
    "Masala Tea Latte",
    "Cheese & Orange Latte",
    "Double cappuccino vegan",
    "Flat White",
    "Flat White decaffeinated",
    "Flat white vegan",
    "Latte",
    "Latte decaffeinated",
    "Latte vegan",
    "Ice latte",
    "Ice latte decaffeinated",
    "Espresso decaffeinated",
    "Ice latte vegan",
    "Espresso tonic",
    "Espresso tonic decaffeinated",
    "Bumblebee",
    "Doppio(double espresso)",
    "Americano",
    "Americano decaffeinated",
    "Cappuccino",
    "Cappuccino decaffeinated",
    "Cacao",
    "Hot chocolate",
    "Cappuccino vegan",
    "Double Americano",
    "Double cappuccino"
}
PRIORITY_DRINKS_LOWER = {name.lower().strip() for name in PRIORITY_DRINKS}


def is_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return not AUTHORIZED_USER_IDS or user_id in AUTHORIZED_USER_IDS


def analyze_excel(file_path: str) -> tuple[str, str, pd.DataFrame]:
    """–ê–Ω–∞–ª–∏–∑ Excel-—Ñ–∞–π–ª–∞ —Å –∫–∞—Å—Å–æ–≤—ã–º –æ—Ç—á—ë—Ç–æ–º"""
    df_raw = pd.read_excel(file_path, header=None)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    header_row = None
    for i in range(len(df_raw)):
        if "Denumire marfa" in df_raw.iloc[i].values:
            header_row = i
            break
    
    if header_row is None:
        raise ValueError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª ‚Äî –æ—Ç—á—ë—Ç –∫–∞—Å—Å—ã.")

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = df_raw.iloc[header_row:].copy()
    df.columns = df.iloc[0]
    df = df[1:].reset_index(drop=True)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –æ—Ç—á—ë—Ç–∞
    report_date = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
    if 'Data' in df.columns:
        non_empty = df['Data'].dropna()
        if not non_empty.empty:
            try:
                report_date = pd.to_datetime(non_empty.iloc[0], dayfirst=True).strftime('%d.%m.%Y')
            except Exception:
                report_date = str(non_empty.iloc[0]).strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required = ["Denumire marfa", "Cantitate", "Suma cu TVA fƒÉrƒÉ reducere"]
    if not all(col in df.columns for col in required):
        raise ValueError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã. –ù–∞–π–¥–µ–Ω—ã: {list(df.columns)}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = df[required].copy()
    df = df.dropna(subset=["Denumire marfa"])
    df = df[~df["Denumire marfa"].str.contains("Punga", na=False, case=False)]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
    df['is_priority'] = df['Denumire marfa'].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
    result = df.groupby("Denumire marfa").agg(
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=("Cantitate", "sum"),
        –°—É–º–º–∞=("Suma cu TVA fƒÉrƒÉ reducere", "sum"),
        is_priority=("is_priority", "any")
    ).round(2)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ —Å—É–º–º–µ
    result = result.sort_values(['is_priority', '–°—É–º–º–∞'], ascending=[False, False])
    result_for_save = result.drop(columns=['is_priority'])

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
    top_rows = result_for_save.head(30)
    text = f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_date}\n\nüìä –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n\n"
    text += top_rows.to_string()

    if len(result_for_save) > 30:
        text += f"\n\n... –∏ –µ—â—ë {len(result_for_save) - 30} –ø–æ–∑–∏—Ü–∏–π. –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç ‚Äî –≤ —Ñ–∞–π–ª–µ."

    return report_date, text, result_for_save


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—Å—Å–æ–≤—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ—Ç—á—ë—Ç–æ–º, –∏ —è:\n"
        "  ‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏\n"
        "  ‚Ä¢ –°–≥—Ä—É–ø–ø–∏—Ä—É—é –ø–æ —Ç–æ–≤–∞—Ä–∞–º\n"
        "  ‚Ä¢ –ü–æ—Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—É–º–º—É\n"
        "  ‚Ä¢ –û—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏\n\n"
        "‚ú® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –±—É–¥—É—Ç –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞!"
    )


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = update.effective_user.id
    if not is_authorized(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    document = update.message.document
    file_name = (document.file_name or "").strip()
    mime_type = (document.mime_type or "").strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ MIME-—Ç–∏–ø—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    valid_mime = mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    valid_ext = file_name.lower().endswith(".xlsx")

    if not (valid_mime or valid_ext):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    input_path = None
    output_path = None

    try:
        await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é —Ñ–∞–π–ª...")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        file = await context.bot.get_file(document.file_id)
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp:
            await file.download_to_drive(tmp.name)
            input_path = tmp.name

        # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
        await update.message.reply_text("‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ...")
        report_date, text_report, df_result = analyze_excel(input_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        if len(text_report) < 4000:
            await update.message.reply_text(text_report)
        else:
            await update.message.reply_text(
                f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_date}\n\n"
                "üìä –û—Ç—á—ë—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–∞–π–ª–µ..."
            )

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        txt_report = format_sales_report(report_date, df_result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –∫–æ—Ä–æ—Ç–∫–∏–π
        if len(txt_report) < 4000:
            await update.message.reply_text(txt_report)
        else:
            # –ò–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ .txt —Ñ–∞–π–ª
            output_filename = f"–û—Ç—á—ë—Ç_{report_date}.txt"
            output_path = os.path.join(tempfile.gettempdir(), output_filename)
            with open(output_path, 'w', encoding='utf-8') as f_out:
                f_out.write(txt_report)
            
            await update.message.reply_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt...")
            with open(output_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=output_filename,
                    caption="‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤!")

    except ValueError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞:\n{str(e)}")
    except Exception as e:
        logging.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n{str(e)[:500]}\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–∞—Å—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç."
        )
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if input_path and Path(input_path).exists():
            try:
                os.unlink(input_path)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {input_path}: {e}")
        
        if output_path and Path(output_path).exists():
            try:
                os.unlink(output_path)
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª {output_path}: {e}")


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Exception while handling an update: {context.error}")
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
    except Exception:
        pass
def format_sales_report(report_date: str, df: pd.DataFrame) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ"""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    df = df.copy()
    if df.index.name != "Denumire marfa":
        df.index.name = "Denumire marfa"
    
    items = df.reset_index()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ñ–µ–π–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ (–ø–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É)
    coffee_items = items[items["Denumire marfa"].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)]
    other_items = items[~items["Denumire marfa"].str.lower().str.strip().isin(PRIORITY_DRINKS_LOWER)]

    total_revenue = items["–°—É–º–º–∞"].sum()
    coffee_revenue = coffee_items["–°—É–º–º–∞"].sum() if not coffee_items.empty else 0
    coffee_count = coffee_items["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum() if not coffee_items.empty else 0

    # –°–æ—Å—Ç–∞–≤ –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
    composition_parts = []
    for _, row in coffee_items.iterrows():
        name = row["Denumire marfa"].lower()
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–∏–¥—É –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ: "americano", "cappuccino" –∏ —Ç.–¥.
        clean_name = name
        for full, short in [
            ("double espresso decaffeinated", "double espresso decaf"),
            ("flat white decaffeinated", "flat white decaf"),
            ("latte decaffeinated", "latte decaf"),
            ("ice latte decaffeinated", "ice latte decaf"),
            ("espresso decaffeinated", "espresso decaf"),
            ("americano decaffeinated", "americano decaf"),
            ("cappuccino decaffeinated", "cappuccino decaf"),
            ("doppio(double espresso)", "doppio"),
            ("double cappuccino vegan", "double cappuccino vegan"),
            ("flat white vegan", "flat white vegan"),
            ("latte vegan", "latte vegan"),
            ("ice latte vegan", "ice latte vegan"),
            ("cappuccino vegan", "cappuccino vegan"),
        ]:
            if clean_name == full:
                clean_name = short
                break
        # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean_name = clean_name.replace("(", "").replace(")", "").replace("  ", " ").strip()
        composition_parts.append(f"{int(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])} {clean_name}")

    composition = " + ".join(composition_parts) if composition_parts else ""

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    report = f"üìÖ –î–∞—Ç–∞ –æ—Ç—á—ë—Ç–∞: {report_date}\n"
    report += f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –∑–∞ –¥–µ–Ω—å: {total_revenue:,.2f} –ª–µ–π\n".replace(",", " ")
    report += f"‚òï –í—ã—Ä—É—á–∫–∞ –æ—Ç –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤: {coffee_revenue:,.2f} –ª–µ–π\n".replace(",", " ")
    report += f"üî¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤: {int(coffee_count)} —à—Ç.\n"
    if composition:
        report += f"‚ÑπÔ∏è  –°–æ—Å—Ç–∞–≤: {composition}\n"
    other_revenue = total_revenue - coffee_revenue
    report += f"üç± –í—ã—Ä—É—á–∫–∞ –æ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ: {other_revenue:,.2f} –ª–µ–π\n".replace(",", " ")
    report += "\nüìä –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º:\n"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    report += f"{'Denumire marfa':<40} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<12} {'–°—É–º–º–∞'}\n"
    report += "‚îÄ" * 64 + "\n"

    # –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (–≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –≤ df ‚Äî —É–∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã)
    for _, row in items.iterrows():
        name = str(row["Denumire marfa"])
        qty = f"{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']:.2f}"
        amt = f"{row['–°—É–º–º–∞']:.2f}"
        report += f"{name:<40} {qty:<12} {amt}\n"

    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    logger = logging.getLogger(__name__)
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞... v2025-10-27-1")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫ polling
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
